{"version":3,"file":"setup.js","sourceRoot":"","sources":["../../../../src/wrappers/lockedVoter/setup.ts"],"names":[],"mappings":";;;;AAGA,6CAA0C;AAO1C,+CAGyB;AAEzB,2CAA+D;AAC/D,qCAAyC;AAEzC;;;GAGG;AACI,MAAM,YAAY,GAAG,CAAO,EACjC,GAAG,EACH,OAAO,EACP,YAAY,EACZ,MAAM,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,EACxC,oBAAoB,GAAG,yCAA6B,EACpD,YAAY,GAAG,iCAAqB,EACpC,cAAc,GAAG,iBAAO,CAAC,QAAQ,EAAE,EACnC,YAAY,GAAG,iBAAO,CAAC,QAAQ,EAAE,EACjC,iBAAiB,GAAG,iBAAO,CAAC,QAAQ,EAAE,GAoBvC,EAQE,EAAE;IACH,MAAM,KAA8B,MAAM,IAAA,oCAA4B,EAAC;QACrE,gBAAgB,EAAE,CAAO,WAAW,EAAE,EAAE;YACtC,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,MAAM,GAAG,CAAC,YAAY,iCAC7C,YAAY,KACf,MAAM,EAAE,YAAY,EACpB,QAAQ,EAAE,WAAW,EACrB,YAAY,IACZ,CAAC;YACH,OAAO;gBACL,GAAG,EAAE,MAAM;gBACX,EAAE,EAAE,GAAG;aACR,CAAC;QACJ,CAAC,CAAA;QACD,GAAG;QACH,OAAO;QACP,MAAM;QACN,oBAAoB;QACpB,SAAS,EAAE,cAAc;QACzB,iBAAiB;KAClB,CAAC,EAnBI,EAAE,UAAU,OAmBhB,EAnBqB,QAAQ,sBAAzB,cAA2B,CAmB/B,CAAC;IACH,uCACK,QAAQ,KACX,aAAa,EAAE,IAAI,sBAAa,CAC9B,GAAG,EACH,UAAU,EACV,QAAQ,CAAC,eAAe,CAAC,WAAW,CACrC,IACD;AACJ,CAAC,CAAA,CAAC;AAlEW,QAAA,YAAY,gBAkEvB","sourcesContent":["import type { GokiSDK, SmartWalletWrapper } from \"@gokiprotocol/client\";\nimport type { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { Keypair } from \"@solana/web3.js\";\n\nimport type {\n  GovernanceParameters,\n  GovernorWrapper,\n  LockerParams,\n} from \"../..\";\nimport {\n  DEFAULT_GOVERNANCE_PARAMETERS,\n  DEFAULT_LOCKER_PARAMS,\n} from \"../../constants\";\nimport type { TribecaSDK } from \"../../sdk\";\nimport { createGovernorWithElectorate } from \"../govern/setup\";\nimport { LockerWrapper } from \"./locker\";\n\n/**\n * Creates a new Locker.\n * @returns\n */\nexport const createLocker = async ({\n  sdk,\n  gokiSDK,\n  govTokenMint,\n  owners = [sdk.provider.wallet.publicKey],\n  governanceParameters = DEFAULT_GOVERNANCE_PARAMETERS,\n  lockerParams = DEFAULT_LOCKER_PARAMS,\n  governorBaseKP = Keypair.generate(),\n  lockerBaseKP = Keypair.generate(),\n  smartWalletBaseKP = Keypair.generate(),\n}: {\n  sdk: TribecaSDK;\n  gokiSDK: GokiSDK;\n  govTokenMint: PublicKey;\n  owners?: PublicKey[];\n  governanceParameters?: Partial<GovernanceParameters>;\n  lockerParams?: Partial<LockerParams>;\n  /**\n   * Base of the governor.\n   */\n  governorBaseKP?: Keypair;\n  /**\n   * Base of the governor.\n   */\n  lockerBaseKP?: Keypair;\n  /**\n   * Base of the smart wallet.\n   */\n  smartWalletBaseKP?: Keypair;\n}): Promise<{\n  governorWrapper: GovernorWrapper;\n  smartWalletWrapper: SmartWalletWrapper;\n  lockerWrapper: LockerWrapper;\n  createTXs: {\n    title: string;\n    tx: TransactionEnvelope;\n  }[];\n}> => {\n  const { electorate, ...governor } = await createGovernorWithElectorate({\n    createElectorate: async (governorKey) => {\n      const { locker, tx: tx1 } = await sdk.createLocker({\n        ...lockerParams,\n        baseKP: lockerBaseKP,\n        governor: governorKey,\n        govTokenMint,\n      });\n      return {\n        key: locker,\n        tx: tx1,\n      };\n    },\n    sdk,\n    gokiSDK,\n    owners,\n    governanceParameters,\n    govBaseKP: governorBaseKP,\n    smartWalletBaseKP,\n  });\n  return {\n    ...governor,\n    lockerWrapper: new LockerWrapper(\n      sdk,\n      electorate,\n      governor.governorWrapper.governorKey\n    ),\n  };\n};\n"]}