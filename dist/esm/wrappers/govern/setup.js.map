{"version":3,"file":"setup.js","sourceRoot":"","sources":["../../../../src/wrappers/govern/setup.ts"],"names":[],"mappings":";AAGA,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAC1C,OAAO,EAAE,MAAM,OAAO,CAAC;AAGvB,OAAO,EAAE,6BAA6B,EAAE,MAAM,OAAO,CAAC;AAEtD,OAAO,EAAE,mBAAmB,EAAE,MAAM,IAAI,CAAC;AAEzC;;;GAGG;AACH,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAO,EACjD,gBAAgB,EAChB,GAAG,EACH,OAAO,EACP,MAAM,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,EACxC,oBAAoB,GAAG,6BAA6B,EACpD,SAAS,GAAG,OAAO,CAAC,QAAQ,EAAE,EAC9B,iBAAiB,GAAG,OAAO,CAAC,QAAQ,EAAE,GAiBvC,EAQE,EAAE;IACH,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IAElE,MAAM,SAAS,GAGT,EAAE,CAAC;IAET,MAAM,EAAE,kBAAkB,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,MAAM,OAAO,CAAC,cAAc,CAAC;QACnE,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,QAAQ,CAAC;QAC7B,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QACpB,SAAS,EAAE,CAAC;QACZ,IAAI,EAAE,iBAAiB;KACxB,CAAC,CAAC;IACH,SAAS,CAAC,IAAI,CAAC;QACb,KAAK,EAAE,qBAAqB;QAC5B,EAAE,EAAE,GAAG;KACR,CAAC,CAAC;IAEH,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,EAAE,kBAAkB,EAAE,GAAG,MAAM,gBAAgB,CACxE,QAAQ,CACT,CAAC;IAEF,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,cAAc,iCAEtE,oBAAoB,KACvB,MAAM,EAAE,SAAS,EACjB,UAAU,EACV,WAAW,EAAE,kBAAkB,CAAC,GAAG,IAEtC,CAAC;IACF,SAAS,CAAC,IAAI,CAAC;QACb,KAAK,EAAE,iBAAiB;QACxB,EAAE,EAAE,GAAG;KACR,CAAC,CAAC;IAEH,SAAS,CAAC,IAAI,CAAC;QACb,KAAK,EAAE,mBAAmB;QAC1B,EAAE,EAAE,kBAAkB;KACvB,CAAC,CAAC;IAEH,OAAO;QACL,eAAe;QACf,kBAAkB;QAClB,SAAS;QACT,UAAU;KACX,CAAC;AACJ,CAAC,CAAA,CAAC","sourcesContent":["import type { GokiSDK, SmartWalletWrapper } from \"@gokiprotocol/client\";\nimport type { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { Keypair } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport type { GovernanceParameters, TribecaSDK } from \"../..\";\nimport { DEFAULT_GOVERNANCE_PARAMETERS } from \"../..\";\nimport type { GovernorWrapper } from \"..\";\nimport { findGovernorAddress } from \"..\";\n\n/**\n * Creates a Governor.\n * @returns\n */\nexport const createGovernorWithElectorate = async ({\n  createElectorate,\n  sdk,\n  gokiSDK,\n  owners = [sdk.provider.wallet.publicKey],\n  governanceParameters = DEFAULT_GOVERNANCE_PARAMETERS,\n  govBaseKP = Keypair.generate(),\n  smartWalletBaseKP = Keypair.generate(),\n}: {\n  createElectorate: (\n    governor: PublicKey\n  ) => Promise<{ key: PublicKey; tx: TransactionEnvelope }>;\n  sdk: TribecaSDK;\n  gokiSDK: GokiSDK;\n  owners?: PublicKey[];\n  governanceParameters?: Partial<GovernanceParameters>;\n  /**\n   * Base of the governor.\n   */\n  govBaseKP?: Keypair;\n  /**\n   * Base of the smart wallet.\n   */\n  smartWalletBaseKP?: Keypair;\n}): Promise<{\n  governorWrapper: GovernorWrapper;\n  smartWalletWrapper: SmartWalletWrapper;\n  electorate: PublicKey;\n  createTXs: {\n    title: string;\n    tx: TransactionEnvelope;\n  }[];\n}> => {\n  const [governor] = await findGovernorAddress(govBaseKP.publicKey);\n\n  const createTXs: {\n    title: string;\n    tx: TransactionEnvelope;\n  }[] = [];\n\n  const { smartWalletWrapper, tx: tx1 } = await gokiSDK.newSmartWallet({\n    owners: [...owners, governor],\n    threshold: new BN(2),\n    numOwners: 3,\n    base: smartWalletBaseKP,\n  });\n  createTXs.push({\n    title: \"Create Smart Wallet\",\n    tx: tx1,\n  });\n\n  const { key: electorate, tx: createElectorateTX } = await createElectorate(\n    governor\n  );\n\n  const { wrapper: governorWrapper, tx: tx2 } = await sdk.govern.createGovernor(\n    {\n      ...governanceParameters,\n      baseKP: govBaseKP,\n      electorate,\n      smartWallet: smartWalletWrapper.key,\n    }\n  );\n  createTXs.push({\n    title: \"Create Governor\",\n    tx: tx2,\n  });\n\n  createTXs.push({\n    title: \"Create Electorate\",\n    tx: createElectorateTX,\n  });\n\n  return {\n    governorWrapper,\n    smartWalletWrapper,\n    createTXs,\n    electorate,\n  };\n};\n"]}