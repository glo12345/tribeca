{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/wrappers/govern/types.ts"],"names":[],"mappings":"AAgBA;;GAEG;AACH,MAAM,CAAN,IAAY,aAiCX;AAjCD,WAAY,aAAa;IACvB;;;;OAIG;IACH,mDAAK,CAAA;IACL;;;;OAIG;IACH,qDAAM,CAAA;IACN;;;OAGG;IACH,yDAAQ,CAAA;IACR;;;;;OAKG;IACH,yDAAQ,CAAA;IACR;;OAEG;IACH,2DAAS,CAAA;IACT;;OAEG;IACH,qDAAM,CAAA;AACR,CAAC,EAjCW,aAAa,KAAb,aAAa,QAiCxB;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAqC;IACrE,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,QAAQ;IAChC,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,OAAO;IAC9B,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,UAAU;IACpC,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,UAAU;IACpC,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,WAAW;IACtC,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,QAAQ;CACxB,CAAC;AAEX;;GAEG;AACH,MAAM,CAAN,IAAY,QAiBX;AAjBD,WAAY,QAAQ;IAClB;;OAEG;IACH,6CAAW,CAAA;IACX;;OAEG;IACH,6CAAW,CAAA;IACX;;OAEG;IACH,qCAAO,CAAA;IACP;;OAEG;IACH,6CAAW,CAAA;AACb,CAAC,EAjBW,QAAQ,KAAR,QAAQ,QAiBnB;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAgC;IAC3D,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,KAAK;IACrB,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,SAAS;IAC7B,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,SAAS;IAC7B,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,SAAS;CAC9B,CAAC","sourcesContent":["import type { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type { PublicKey } from \"@solana/web3.js\";\n\nimport type { GovernorWrapper } from \"./governor\";\n\nexport type PendingGovernor = {\n  wrapper: GovernorWrapper;\n  tx: TransactionEnvelope;\n};\n\nexport type WhitelistArgs = {\n  canPropose: boolean;\n  activator: PublicKey;\n  smartWalletOwner?: PublicKey;\n};\n\n/**\n * State of a proposal.\n */\nexport enum ProposalState {\n  /*\n   * Anyone can create a proposal on Tribeca. When a governance proposal is created,\n   * it is considered a [ProposalState::Draft] and enters a review period, after which voting weights\n   * are recorded and voting begins.\n   */\n  Draft,\n  /*\n   * Each DAO has requirements for who can activate proposals; a common way\n   * is to require the user to have a minimum amount of tokens.\n   * An [ProposalState::Active] proposal is one that is surfaced to the community to put up for voting.\n   */\n  Active,\n  /*\n   * If a proposal is still a [ProposalState::Draft], a proposal may be canceled by its creator.\n   * A canceled proposal cannot be reactivated; it simply just exists as a record.\n   */\n  Canceled,\n  /*\n   * After the voting period ends, votes are tallied up. A proposal is [ProposalState::Defeated] if one of\n   * two scenarios happen:\n   * - More or equal votes are [VoteSide::Against] than [VoteSide::For].\n   * - The sum of all votes does not meet quorum.\n   */\n  Defeated,\n  /*\n   * A proposal is [ProposalState::Succeeded] if it is not defeated and voting is over.\n   */\n  Succeeded,\n  /*\n   * A succeeded proposal may be [ProposalState::Queued] into the [SmartWallet].\n   */\n  Queued,\n}\n\n/**\n * Labels for proposal states.\n */\nexport const PROPOSAL_STATE_LABELS: { [K in ProposalState]: string } = {\n  [ProposalState.Active]: \"Active\",\n  [ProposalState.Draft]: \"Draft\",\n  [ProposalState.Canceled]: \"Canceled\",\n  [ProposalState.Defeated]: \"Defeated\",\n  [ProposalState.Succeeded]: \"Succeeded\",\n  [ProposalState.Queued]: \"Queued\",\n} as const;\n\n/**\n * Side of a vote.\n */\nexport enum VoteSide {\n  /**\n   * A vote that has not been set or has been unset.\n   */\n  Pending = 0,\n  /**\n   * Vote against the passing of the proposal.\n   */\n  Against = 1,\n  /**\n   * Vote to make the proposal pass.\n   */\n  For = 2,\n  /**\n   * This vote does not count as a `For` or `Against`, but it still contributes to quorum.\n   */\n  Abstain = 3,\n}\n\n/**\n * Labels for vote sides.\n */\nexport const VOTE_SIDE_LABELS: { [K in VoteSide]: string } = {\n  [VoteSide.For]: \"For\",\n  [VoteSide.Against]: \"Against\",\n  [VoteSide.Abstain]: \"Abstain\",\n  [VoteSide.Pending]: \"Pending\",\n};\n"]}