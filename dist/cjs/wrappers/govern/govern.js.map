{"version":3,"file":"govern.js","sourceRoot":"","sources":["../../../../src/wrappers/govern/govern.ts"],"names":[],"mappings":";;;;AAAA,4DAA8D;AAE9D,6CAAyD;AAGzD,6BAAsD;AAGtD,yCAA6C;AAC7C,+BAA4C;AAG5C,MAAa,aAAa;IAGxB,YAAqB,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;QAClC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC;IACrC,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;IAC3B,CAAC;IAEK,SAAS,CAAC,GAAc;;YAC5B,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACpD,CAAC;KAAA;IAEK,cAAc,CAAC,EAapB;YAboB,EACnB,UAAU,EACV,WAAW,EACX,MAAM,GAAG,iBAAO,CAAC,QAAQ,EAAE,OAU5B,EATI,cAAc,sBAJE,uCAKpB,CADkB;;YAUjB,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,MAAM,IAAA,yBAAmB,EAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACrE,MAAM,OAAO,GAAG,IAAI,0BAAe,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YACxD,OAAO;gBACL,OAAO;gBACP,EAAE,EAAE,IAAI,oCAAmB,CACzB,IAAI,CAAC,QAAQ,EACb;oBACE,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,cAAc,CACjD,IAAI,EACJ,UAAU,kCAEL,iCAA6B,GAC7B,cAAc,GAEnB;wBACE,QAAQ,EAAE;4BACR,IAAI,EAAE,MAAM,CAAC,SAAS;4BACtB,QAAQ;4BACR,WAAW;4BACX,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS;4BACrC,aAAa,EAAE,uBAAa,CAAC,SAAS;yBACvC;qBACF,CACF;iBACF,EACD,CAAC,MAAM,CAAC,CACT;aACF,CAAC;;KACH;CACF;AA1DD,sCA0DC","sourcesContent":["import { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { Keypair, SystemProgram } from \"@solana/web3.js\";\nimport type BN from \"bn.js\";\n\nimport { DEFAULT_GOVERNANCE_PARAMETERS } from \"../..\";\nimport type { GovernProgram, VoteData } from \"../../programs/govern\";\nimport type { TribecaSDK } from \"../../sdk\";\nimport { GovernorWrapper } from \"./governor\";\nimport { findGovernorAddress } from \"./pda\";\nimport type { PendingGovernor } from \"./types\";\n\nexport class GovernWrapper {\n  readonly program: GovernProgram;\n\n  constructor(readonly sdk: TribecaSDK) {\n    this.program = sdk.programs.Govern;\n  }\n\n  get provider() {\n    return this.sdk.provider;\n  }\n\n  async fetchVote(key: PublicKey): Promise<VoteData> {\n    return await this.program.account.vote.fetch(key);\n  }\n\n  async createGovernor({\n    electorate,\n    smartWallet,\n    baseKP = Keypair.generate(),\n    ...governorParams\n  }: {\n    electorate: PublicKey;\n    smartWallet: PublicKey;\n    baseKP?: Keypair;\n    quorumVotes?: BN;\n    votingDelay?: BN;\n    votingPeriod?: BN;\n    smartWalletOwner?: PublicKey;\n  }): Promise<PendingGovernor> {\n    const [governor, bump] = await findGovernorAddress(baseKP.publicKey);\n    const wrapper = new GovernorWrapper(this.sdk, governor);\n    return {\n      wrapper,\n      tx: new TransactionEnvelope(\n        this.provider,\n        [\n          this.sdk.programs.Govern.instruction.createGovernor(\n            bump,\n            electorate,\n            {\n              ...DEFAULT_GOVERNANCE_PARAMETERS,\n              ...governorParams,\n            },\n            {\n              accounts: {\n                base: baseKP.publicKey,\n                governor,\n                smartWallet,\n                payer: this.provider.wallet.publicKey,\n                systemProgram: SystemProgram.programId,\n              },\n            }\n          ),\n        ],\n        [baseKP]\n      ),\n    };\n  }\n}\n"]}