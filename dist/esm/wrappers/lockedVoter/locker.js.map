{"version":3,"file":"locker.js","sourceRoot":"","sources":["../../../../src/wrappers/lockedVoter/locker.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BN } from \"@project-serum/anchor\";\nimport {\n  createMemoInstruction,\n  TransactionEnvelope,\n} from \"@saberhq/solana-contrib\";\nimport { getOrCreateATA, TOKEN_PROGRAM_ID } from \"@saberhq/token-utils\";\nimport type { TransactionInstruction } from \"@solana/web3.js\";\nimport {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from \"@solana/web3.js\";\nimport invariant from \"tiny-invariant\";\n\nimport { TRIBECA_ADDRESSES } from \"../../constants\";\nimport type {\n  EscrowData,\n  LockedVoterProgram,\n  LockerData,\n  LockerParams,\n  ProposalData,\n} from \"../../programs\";\nimport type { TribecaSDK } from \"../../sdk\";\nimport type { VoteSide } from \"../../wrappers/govern/types\";\nimport { GovernorWrapper } from \"../govern/governor\";\nimport { findWhitelistAddress } from \".\";\nimport { findEscrowAddress } from \"./pda\";\n\n/**\n * Helper methods around a Locked Voter electorate.\n */\nexport class LockerWrapper {\n  readonly program: LockedVoterProgram;\n  readonly governor: GovernorWrapper;\n\n  private _lockerData: LockerData | null = null;\n\n  constructor(\n    readonly sdk: TribecaSDK,\n    readonly locker: PublicKey,\n    readonly governorKey: PublicKey\n  ) {\n    this.program = sdk.programs.LockedVoter;\n    this.governor = new GovernorWrapper(sdk, governorKey);\n  }\n\n  static async load(\n    sdk: TribecaSDK,\n    lockerKey: PublicKey,\n    governorKey: PublicKey\n  ): Promise<LockerWrapper> {\n    const wrapper = new LockerWrapper(sdk, lockerKey, governorKey);\n    await wrapper.data();\n    return wrapper;\n  }\n\n  /**\n   * Fetches the data of the locker.\n   * @returns\n   */\n  async reload(): Promise<LockerData> {\n    return this.program.account.locker.fetch(this.locker);\n  }\n\n  async fetchProposalData(proposalKey: PublicKey): Promise<ProposalData> {\n    return await this.sdk.govern.program.account.proposal.fetch(proposalKey);\n  }\n\n  async fetchEscrow(escrowKey: PublicKey): Promise<EscrowData> {\n    return await this.program.account.escrow.fetch(escrowKey);\n  }\n\n  async fetchEscrowByAuthority(\n    authority: PublicKey = this.sdk.provider.wallet.publicKey\n  ): Promise<EscrowData> {\n    const [escrowKey] = await findEscrowAddress(this.locker, authority);\n    return this.fetchEscrow(escrowKey);\n  }\n\n  /**\n   * Fetches the data of the locker.\n   * @returns\n   */\n  async data(): Promise<LockerData> {\n    if (!this._lockerData) {\n      this._lockerData = await this.reload();\n    }\n    return this._lockerData;\n  }\n\n  async getOrCreateEscrow(\n    authority: PublicKey = this.sdk.provider.wallet.publicKey\n  ): Promise<{\n    escrow: PublicKey;\n    instruction: TransactionInstruction | null;\n  }> {\n    const [escrow] = await findEscrowAddress(this.locker, authority);\n    const escrowData = await this.program.account.escrow.fetchNullable(escrow);\n    if (escrowData) {\n      return { escrow: escrow, instruction: null };\n    } else {\n      return {\n        escrow: escrow,\n        instruction: await this.newEscrowIX(authority),\n      };\n    }\n  }\n\n  /**\n   * Creates the instruction to build a new Escrow.\n   * @param authority\n   * @returns\n   */\n  async newEscrowIX(\n    authority: PublicKey = this.sdk.provider.wallet.publicKey\n  ): Promise<TransactionInstruction> {\n    const [escrow, bump] = await findEscrowAddress(this.locker, authority);\n    return this.program.instruction.newEscrow(bump, {\n      accounts: {\n        locker: this.locker,\n        escrow,\n        escrowOwner: authority,\n        payer: this.sdk.provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n    });\n  }\n\n  async activateProposal({\n    proposal,\n    authority = this.sdk.provider.wallet.publicKey,\n  }: {\n    proposal: PublicKey;\n    authority?: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    const [escrow] = await findEscrowAddress(this.locker, authority);\n    const ix = this.program.instruction.activateProposal({\n      accounts: {\n        locker: this.locker,\n        governor: this.governorKey,\n        proposal,\n        escrow,\n        escrowOwner: authority,\n        governProgram: TRIBECA_ADDRESSES.Govern,\n      },\n    });\n    return new TransactionEnvelope(this.sdk.provider, [ix]);\n  }\n\n  async lockTokensV1({\n    amount,\n    duration,\n    authority = this.sdk.provider.wallet.publicKey,\n  }: {\n    amount: BN;\n    duration: BN;\n    authority?: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    invariant(this.locker, \"locker not set\");\n\n    const { escrow, instruction: initEscrowIx } = await this.getOrCreateEscrow(\n      authority\n    );\n    const { govTokenAccount, govTokenVault, instructions } =\n      await this._getOrCreateGovTokenATAsInternal(authority, escrow);\n    if (initEscrowIx) {\n      instructions.push(initEscrowIx);\n    }\n\n    const lockerData = await this.reload();\n\n    instructions.push(\n      this.program.instruction.lock(amount, duration, {\n        accounts: {\n          locker: this.locker,\n          escrow: escrow,\n          escrowOwner: authority,\n          escrowTokens: govTokenVault,\n          sourceTokens: govTokenAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n        remainingAccounts: lockerData.params.whitelistEnabled\n          ? [\n              {\n                pubkey: SYSVAR_INSTRUCTIONS_PUBKEY,\n                isSigner: false,\n                isWritable: false,\n              },\n              {\n                pubkey: PublicKey.default,\n                isSigner: false,\n                isWritable: false,\n              },\n            ]\n          : [],\n      })\n    );\n\n    return new TransactionEnvelope(this.sdk.provider, instructions);\n  }\n\n  async lockTokens({\n    amount,\n    duration,\n    authority = this.sdk.provider.wallet.publicKey,\n  }: {\n    amount: BN;\n    duration: BN;\n    authority?: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    invariant(this.locker, \"locker not set\");\n\n    const { escrow, instruction: initEscrowIx } = await this.getOrCreateEscrow(\n      authority\n    );\n    const { govTokenAccount, govTokenVault, instructions } =\n      await this._getOrCreateGovTokenATAsInternal(authority, escrow);\n    if (initEscrowIx) {\n      instructions.push(initEscrowIx);\n    }\n\n    const lockerData = await this.reload();\n\n    const lockAccounts = {\n      locker: this.locker,\n      escrow: escrow,\n      escrowOwner: authority,\n      escrowTokens: govTokenVault,\n      sourceTokens: govTokenAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    };\n\n    if (lockerData.params.whitelistEnabled) {\n      instructions.push(\n        this.program.instruction.lockWithWhitelist(amount, duration, {\n          accounts: {\n            lock: lockAccounts,\n            instructionsSysvar: SYSVAR_INSTRUCTIONS_PUBKEY,\n          },\n        })\n      );\n    } else {\n      instructions.push(\n        this.program.instruction.lockPermissionless(amount, duration, {\n          accounts: lockAccounts,\n        })\n      );\n    }\n\n    return new TransactionEnvelope(this.sdk.provider, instructions);\n  }\n\n  async exit({\n    authority = this.sdk.provider.wallet.publicKey,\n  }: {\n    authority?: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    invariant(this.locker, \"locker not set\");\n\n    const [escrow] = await findEscrowAddress(this.locker, authority);\n    const escrowData = await this.fetchEscrow(escrow);\n    const { govTokenAccount, instructions } =\n      await this._getOrCreateGovTokenATAsInternal(authority, escrow);\n    instructions.push(\n      this.program.instruction.exit({\n        accounts: {\n          locker: this.locker,\n          escrow,\n          escrowOwner: authority,\n          escrowTokens: escrowData.tokens,\n          destinationTokens: govTokenAccount,\n          payer: this.sdk.provider.wallet.publicKey,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n      })\n    );\n\n    return new TransactionEnvelope(this.sdk.provider, instructions);\n  }\n\n  async castVotes({\n    voteSide,\n    proposal,\n    authority = this.sdk.provider.wallet.publicKey,\n    reason,\n  }: {\n    voteSide: VoteSide;\n    proposal: PublicKey;\n    authority?: PublicKey;\n    reason?: string;\n  }): Promise<TransactionEnvelope> {\n    const ixs: TransactionInstruction[] = [];\n\n    const { escrow, instruction: escrowIx } = await this.getOrCreateEscrow(\n      authority\n    );\n    if (escrowIx) {\n      ixs.push(escrowIx);\n    }\n\n    const { voteKey, instruction: createVoteIX } =\n      await this.governor.getOrCreateVote({\n        proposal,\n        voter: authority,\n      });\n    if (createVoteIX) {\n      ixs.push(createVoteIX);\n    }\n\n    ixs.push(\n      this.program.instruction.castVote(voteSide, {\n        accounts: {\n          locker: this.locker,\n          escrow: escrow,\n          voteDelegate: authority ?? this.sdk.provider.wallet.publicKey,\n          proposal,\n          vote: voteKey,\n          governor: this.governorKey,\n          governProgram: TRIBECA_ADDRESSES.Govern,\n        },\n      })\n    );\n\n    if (reason?.length) {\n      ixs.push(createMemoInstruction(reason, [authority]));\n    }\n\n    return new TransactionEnvelope(this.sdk.provider, ixs);\n  }\n\n  async setVoteDelegate(\n    newDelegate: PublicKey,\n    authority: PublicKey = this.sdk.provider.wallet.publicKey\n  ): Promise<TransactionEnvelope> {\n    const [escrow] = await findEscrowAddress(this.locker, authority);\n\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.setVoteDelegate(newDelegate, {\n        accounts: {\n          escrow,\n          escrowOwner: authority,\n        },\n      }),\n    ]);\n  }\n\n  async createApproveProgramLockPrivilegeIx(\n    programId: PublicKey,\n    owner: PublicKey | null\n  ): Promise<TransactionInstruction> {\n    const [whitelistEntry, bump] = await findWhitelistAddress(\n      this.locker,\n      programId,\n      owner\n    );\n    const lockerData = await this.reload();\n    const governorData = await this.sdk.programs.Govern.account.governor.fetch(\n      lockerData.governor\n    );\n    return this.program.instruction.approveProgramLockPrivilege(bump, {\n      accounts: {\n        locker: this.locker,\n        whitelistEntry,\n        governor: lockerData.governor,\n        smartWallet: governorData.smartWallet,\n        executableId: programId,\n        whitelistedOwner: owner ?? SystemProgram.programId,\n        payer: this.sdk.provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n    });\n  }\n\n  async createRevokeProgramLockPrivilegeIx(\n    programId: PublicKey,\n    owner: PublicKey | null\n  ): Promise<TransactionInstruction> {\n    const [whitelistEntry] = await findWhitelistAddress(\n      this.locker,\n      programId,\n      owner\n    );\n    const lockerData = await this.reload();\n    const governorData = await this.sdk.programs.Govern.account.governor.fetch(\n      lockerData.governor\n    );\n    return this.program.instruction.revokeProgramLockPrivilege({\n      accounts: {\n        locker: this.locker,\n        whitelistEntry,\n        governor: lockerData.governor,\n        smartWallet: governorData.smartWallet,\n        payer: this.sdk.provider.wallet.publicKey,\n      },\n    });\n  }\n\n  async setLockerParamsIx(args: LockerParams): Promise<TransactionInstruction> {\n    const lockerData = await this.reload();\n    const governorData = await this.sdk.programs.Govern.account.governor.fetch(\n      lockerData.governor\n    );\n\n    return this.program.instruction.setLockerParams(args, {\n      accounts: {\n        locker: this.locker,\n        governor: lockerData.governor,\n        smartWallet: governorData.smartWallet,\n      },\n    });\n  }\n\n  private async _getOrCreateGovTokenATAsInternal(\n    authority: PublicKey,\n    escrow: PublicKey\n  ): Promise<{\n    govTokenAccount: PublicKey;\n    govTokenVault: PublicKey;\n    instructions: TransactionInstruction[];\n  }> {\n    const { provider } = this.sdk;\n    const lockerData = await this.data();\n\n    const { address: govTokenAccount, instruction: ix1 } = await getOrCreateATA(\n      {\n        provider,\n        mint: lockerData.tokenMint,\n        owner: authority,\n        payer: authority,\n      }\n    );\n    const { address: govTokenVault, instruction: ix2 } = await getOrCreateATA({\n      provider,\n      mint: lockerData.tokenMint,\n      owner: escrow,\n      payer: authority,\n    });\n\n    return {\n      govTokenAccount,\n      govTokenVault,\n      instructions: [ix1, ix2].filter(\n        (ix): ix is TransactionInstruction => !!ix\n      ),\n    };\n  }\n}\n"]}