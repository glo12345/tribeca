{"version":3,"file":"governor.js","sourceRoot":"","sources":["../../../../src/wrappers/govern/governor.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  findTransactionAddress,\n  GOKI_ADDRESSES,\n  GOKI_CODERS,\n} from \"@gokiprotocol/client\";\nimport { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport { u64 } from \"@saberhq/token-utils\";\nimport type { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport type BN from \"bn.js\";\n\nimport type {\n  GovernanceParameters,\n  GovernorData,\n  ProposalData,\n  ProposalInstruction,\n  ProposalMetaData,\n} from \"../../programs/govern\";\nimport type { TribecaSDK } from \"../../sdk\";\nimport type { PendingProposal } from \"../simpleVoter/types\";\nimport {\n  findProposalAddress,\n  findProposalMetaAddress,\n  findVoteAddress,\n} from \"./pda\";\n\n/**\n * Wrapper around a Governor.\n */\nexport class GovernorWrapper {\n  private _governor: GovernorData | null = null;\n\n  constructor(readonly sdk: TribecaSDK, readonly governorKey: PublicKey) {}\n\n  get provider() {\n    return this.sdk.provider;\n  }\n\n  get program() {\n    return this.sdk.programs.Govern;\n  }\n\n  async reload(): Promise<GovernorData> {\n    return await this.program.account.governor.fetch(this.governorKey);\n  }\n\n  async data(): Promise<GovernorData> {\n    if (!this._governor) {\n      this._governor = await this.reload();\n    }\n    return this._governor;\n  }\n\n  async findProposalAddress(index: BN): Promise<PublicKey> {\n    const [key] = await findProposalAddress(this.governorKey, index);\n    return key;\n  }\n\n  async fetchProposalByKey(key: PublicKey): Promise<ProposalData> {\n    return await this.program.account.proposal.fetch(key);\n  }\n\n  async fetchProposal(index: BN): Promise<ProposalData> {\n    const key = await this.findProposalAddress(index);\n    return await this.fetchProposalByKey(key);\n  }\n\n  async fetchProposalMeta(proposalKey: PublicKey): Promise<ProposalMetaData> {\n    const [key] = await findProposalMetaAddress(proposalKey);\n    return await this.program.account.proposalMeta.fetch(key);\n  }\n\n  /**\n   * Creates a ProposalMeta for a proposal.\n   * Only the Proposer may call this.\n   *\n   * @returns\n   */\n  async createProposalMeta({\n    proposal,\n    proposer = this.sdk.provider.wallet.publicKey,\n    title,\n    descriptionLink,\n  }: {\n    proposal: PublicKey;\n    proposer?: PublicKey;\n    title: string;\n    descriptionLink: string;\n  }): Promise<TransactionEnvelope> {\n    const [proposalMetaKey, bump] = await findProposalMetaAddress(proposal);\n    const ix = this.sdk.programs.Govern.instruction.createProposalMeta(\n      bump,\n      title,\n      descriptionLink,\n      {\n        accounts: {\n          proposal,\n          proposer,\n          proposalMeta: proposalMetaKey,\n          payer: this.provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n      }\n    );\n    return this.provider.newTX([ix]);\n  }\n\n  /**\n   * Creates a new Proposal.\n   * @returns\n   */\n  async createProposal({\n    proposer = this.sdk.provider.wallet.publicKey,\n    instructions,\n  }: {\n    proposer?: PublicKey;\n    instructions: ProposalInstruction[];\n  }): Promise<PendingProposal> {\n    const { provider } = this.sdk;\n\n    const governorData = await this.reload();\n    const index = new u64(governorData.proposalCount);\n    const [proposal, bump] = await findProposalAddress(this.governorKey, index);\n\n    const ixs: TransactionInstruction[] = [];\n\n    ixs.push(\n      this.sdk.programs.Govern.instruction.createProposal(bump, instructions, {\n        accounts: {\n          governor: this.governorKey,\n          proposal,\n          proposer,\n          payer: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n      })\n    );\n\n    return {\n      proposal,\n      index,\n      tx: this.provider.newTX(ixs),\n    };\n  }\n\n  /**\n   * Queues a Proposal for execution by the Smart Wallet.\n   * @returns\n   */\n  async queueProposal({\n    index,\n    smartWalletProgram = GOKI_ADDRESSES.SmartWallet,\n    payer = this.provider.wallet.publicKey,\n  }: {\n    index: BN;\n    smartWalletProgram?: PublicKey;\n    payer?: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    const governorData = await this.data();\n\n    const [proposal] = await findProposalAddress(this.governorKey, index);\n    const smartWalletDataRaw =\n      await this.program.provider.connection.getAccountInfo(\n        governorData.smartWallet\n      );\n    if (!smartWalletDataRaw) {\n      throw new Error(\"smart wallet not found\");\n    }\n    const smartWalletData = GOKI_CODERS.SmartWallet.accountParsers.smartWallet(\n      smartWalletDataRaw.data\n    );\n    const [txKey, txBump] = await findTransactionAddress(\n      governorData.smartWallet,\n      smartWalletData.numTransactions.toNumber()\n    );\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.queueProposal(txBump, {\n        accounts: {\n          governor: this.governorKey,\n          proposal,\n          smartWallet: governorData.smartWallet,\n          smartWalletProgram,\n          transaction: txKey,\n          payer,\n          systemProgram: SystemProgram.programId,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Cancel a new Proposal.\n   * @returns\n   */\n  cancelProposal({\n    proposal,\n    proposer = this.sdk.provider.wallet.publicKey,\n  }: {\n    proposal: PublicKey;\n    proposer?: PublicKey;\n  }): TransactionEnvelope {\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.sdk.programs.Govern.instruction.cancelProposal({\n        accounts: {\n          governor: this.governorKey,\n          proposal,\n          proposer,\n        },\n      }),\n    ]);\n  }\n\n  async getOrCreateVote({\n    proposal,\n    voter = this.sdk.provider.wallet.publicKey,\n    payer = this.sdk.provider.wallet.publicKey,\n  }: {\n    proposal: PublicKey;\n    voter?: PublicKey;\n    payer?: PublicKey;\n  }): Promise<{\n    voteKey: PublicKey;\n    instruction: TransactionInstruction | null;\n  }> {\n    const [voteKey, bump] = await findVoteAddress(proposal, voter);\n\n    try {\n      await this.program.account.vote.fetch(voteKey);\n      return { voteKey, instruction: null };\n    } catch {\n      return {\n        voteKey,\n        instruction: await this.createVoteIx({\n          proposal,\n          voteKeyAndBump: [voteKey, bump],\n          voter,\n          payer,\n        }),\n      };\n    }\n  }\n\n  async createVoteIx({\n    proposal,\n    voteKeyAndBump,\n    voter = this.sdk.provider.wallet.publicKey,\n    payer = this.sdk.provider.wallet.publicKey,\n  }: {\n    proposal: PublicKey;\n    voteKeyAndBump?: [PublicKey, number];\n    voter?: PublicKey;\n    payer?: PublicKey;\n  }): Promise<TransactionInstruction> {\n    if (!voteKeyAndBump) {\n      voteKeyAndBump = await findVoteAddress(proposal, voter);\n    }\n\n    const [voteKey, bump] = voteKeyAndBump;\n    return this.program.instruction.newVote(bump, voter, {\n      accounts: {\n        vote: voteKey,\n        proposal,\n        payer,\n        systemProgram: SystemProgram.programId,\n      },\n    });\n  }\n\n  async setGovernanceParamsIx(\n    newParams: GovernanceParameters\n  ): Promise<TransactionInstruction> {\n    const { smartWallet } = await this.data();\n    return this.program.instruction.setGovernanceParams(newParams, {\n      accounts: {\n        governor: this.governorKey,\n        smartWallet,\n      },\n    });\n  }\n}\n"]}