{"version":3,"file":"electorate.js","sourceRoot":"","sources":["../../../../src/wrappers/simpleVoter/electorate.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createMemoInstruction,\n  TransactionEnvelope,\n} from \"@saberhq/solana-contrib\";\nimport type { u64 } from \"@saberhq/token-utils\";\nimport {\n  getATAAddress,\n  getOrCreateATA,\n  TOKEN_PROGRAM_ID,\n} from \"@saberhq/token-utils\";\nimport type { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport invariant from \"tiny-invariant\";\n\nimport { TRIBECA_ADDRESSES } from \"../../constants\";\nimport type {\n  ElectorateData,\n  ProposalData,\n  SimpleVoterProgram,\n  TokenRecordData,\n} from \"../../programs\";\nimport type { TribecaSDK } from \"../../sdk\";\nimport { GovernorWrapper } from \"../govern/governor\";\nimport { findTokenRecordAddress } from \"./pda\";\nimport type { VoteArgs } from \"./types\";\n\n/**\n * Helper methods around a Simple Voter electorate.\n */\nexport class SimpleVoterWrapper {\n  readonly program: SimpleVoterProgram;\n  readonly governor: GovernorWrapper;\n\n  electorateData?: ElectorateData;\n\n  constructor(\n    readonly sdk: TribecaSDK,\n    readonly electorate: PublicKey,\n    readonly governorKey: PublicKey\n  ) {\n    this.program = sdk.programs.SimpleVoter;\n    this.governor = new GovernorWrapper(sdk, governorKey);\n  }\n\n  get provider() {\n    return this.sdk.provider;\n  }\n\n  static async load(\n    sdk: TribecaSDK,\n    electorateKey: PublicKey\n  ): Promise<SimpleVoterWrapper> {\n    const electorateData =\n      await sdk.programs.SimpleVoter.account.electorate.fetch(electorateKey);\n    const wrapper = new SimpleVoterWrapper(\n      sdk,\n      electorateKey,\n      electorateData.governor\n    );\n    wrapper.electorateData = electorateData;\n    return wrapper;\n  }\n\n  async fetchProposalData(proposalKey: PublicKey): Promise<ProposalData> {\n    return await this.sdk.programs.Govern.account.proposal.fetch(proposalKey);\n  }\n\n  async fetchTokenRecord(tokenRecordKey: PublicKey): Promise<TokenRecordData> {\n    return await this.program.account.tokenRecord.fetch(tokenRecordKey);\n  }\n\n  async fetchVoterMetadata(): Promise<ElectorateData> {\n    invariant(this.electorate, \"electorate not set\");\n    this.electorateData = await this.program.account.electorate.fetch(\n      this.electorate\n    );\n    return this.electorateData;\n  }\n\n  async getOrCreateTokenRecord(\n    authority: PublicKey = this.sdk.provider.wallet.publicKey\n  ): Promise<{\n    tokenRecord: PublicKey;\n    instruction: TransactionInstruction | null;\n  }> {\n    invariant(this.electorate, \"electorate not set\");\n\n    const [tokenRecord] = await findTokenRecordAddress(\n      authority,\n      this.electorate\n    );\n\n    try {\n      await this.program.account.tokenRecord.fetch(tokenRecord);\n      return { tokenRecord, instruction: null };\n    } catch {\n      return {\n        tokenRecord,\n        instruction: await this.initializeTokenRecordIx(authority),\n      };\n    }\n  }\n\n  async depositTokens(\n    amount: u64,\n    authority: PublicKey = this.sdk.provider.wallet.publicKey\n  ): Promise<TransactionEnvelope> {\n    invariant(this.electorate, \"electorate not set\");\n\n    const { tokenRecord, instruction: initTokenRecordIx } =\n      await this.getOrCreateTokenRecord(authority);\n    const { govTokenAccount, govTokenVault, instructions } =\n      await this._getOrCreateGovTokenATAsInternal(authority, tokenRecord);\n    if (initTokenRecordIx) {\n      instructions.push(initTokenRecordIx);\n    }\n    instructions.push(\n      this.program.instruction.depositTokens(amount, {\n        accounts: {\n          authority,\n          govTokenAccount,\n          govTokenVault,\n          tokenRecord,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n      })\n    );\n\n    return new TransactionEnvelope(this.sdk.provider, instructions);\n  }\n\n  async withdrawTokens(\n    amount: u64,\n    authority: PublicKey\n  ): Promise<TransactionEnvelope> {\n    invariant(this.electorate, \"electorate not set\");\n    invariant(this.electorateData, \"electorate data not loaded\");\n\n    const [tokenRecord] = await findTokenRecordAddress(\n      authority,\n      this.electorate\n    );\n    const { govTokenAccount, govTokenVault, instructions } =\n      await this._getOrCreateGovTokenATAsInternal(authority, tokenRecord);\n    instructions.push(\n      this.program.instruction.withdrawTokens(amount, {\n        accounts: {\n          authority,\n          govTokenAccount,\n          govTokenVault,\n          tokenRecord,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n      })\n    );\n\n    return new TransactionEnvelope(this.sdk.provider, instructions);\n  }\n\n  activateProposal(proposal: PublicKey): TransactionEnvelope {\n    const ix = this.program.instruction.activateProposal({\n      accounts: {\n        electorate: this.electorate,\n        governor: this.governorKey,\n        proposal,\n        governProgram: TRIBECA_ADDRESSES.Govern,\n      },\n    });\n    return new TransactionEnvelope(this.sdk.provider, [ix]);\n  }\n\n  async castVotes(args: VoteArgs): Promise<TransactionEnvelope> {\n    invariant(this.electorateData, \"electorate data not loaded\");\n    const {\n      authority = this.provider.wallet.publicKey,\n      proposal,\n      voteSide,\n      reason,\n    } = args;\n    const ixs: TransactionInstruction[] = [];\n    const { tokenRecord, instruction: tokenRecordIx } =\n      await this.getOrCreateTokenRecord(authority);\n    if (tokenRecordIx) {\n      ixs.push(tokenRecordIx);\n    }\n\n    const { voteKey, instruction: createVoteIX } =\n      await this.governor.getOrCreateVote({\n        proposal,\n        voter: authority,\n      });\n    if (createVoteIX) {\n      ixs.push(createVoteIX);\n    }\n\n    ixs.push(\n      this.program.instruction.castVotes(voteSide, {\n        accounts: {\n          electorate: this.electorate,\n          authority: authority ?? this.sdk.provider.wallet.publicKey,\n          proposal,\n          tokenRecord,\n          vote: voteKey,\n          tribeca: this._genTribecaContext(),\n        },\n      })\n    );\n    if (reason) {\n      ixs.push(createMemoInstruction(reason, [authority]));\n    }\n\n    return new TransactionEnvelope(this.sdk.provider, ixs);\n  }\n\n  async withdrawVotes(\n    proposal: PublicKey,\n    authority: PublicKey = this.sdk.provider.wallet.publicKey\n  ): Promise<TransactionEnvelope> {\n    invariant(this.electorateData, \"electorate data not loaded\");\n\n    const ixs: TransactionInstruction[] = [];\n    const { tokenRecord, instruction: tokenRecordIx } =\n      await this.getOrCreateTokenRecord(authority);\n    if (tokenRecordIx) {\n      ixs.push(tokenRecordIx);\n    }\n\n    const { voteKey, instruction: voteRecieptIx } =\n      await this.governor.getOrCreateVote({\n        proposal,\n      });\n    if (voteRecieptIx) {\n      ixs.push(voteRecieptIx);\n    }\n\n    ixs.push(\n      this.program.instruction.withdrawVotes({\n        accounts: {\n          electorate: this.electorate,\n          authority,\n          proposal,\n          tokenRecord,\n          vote: voteKey,\n          tribeca: this._genTribecaContext(),\n        },\n      })\n    );\n\n    return new TransactionEnvelope(this.sdk.provider, ixs);\n  }\n\n  async depositTokenAndCastVote(\n    args: VoteArgs & { amount: u64 }\n  ): Promise<TransactionEnvelope> {\n    const {\n      amount,\n      proposal,\n      voteSide,\n      reason,\n      authority = this.provider.wallet.publicKey,\n    } = args;\n    const { tokenRecord, instruction: tokenRecordIx } =\n      await this.getOrCreateTokenRecord(authority);\n    const { govTokenAccount, govTokenVault, instructions } =\n      await this._getOrCreateGovTokenATAsInternal(authority, tokenRecord);\n    if (tokenRecordIx) {\n      instructions.push(tokenRecordIx);\n    }\n\n    const { voteKey, instruction: createVoteIX } =\n      await this.governor.getOrCreateVote({\n        proposal,\n        voter: authority,\n      });\n    if (createVoteIX) {\n      instructions.push(createVoteIX);\n    }\n\n    instructions.push(\n      this.program.instruction.depositTokens(amount, {\n        accounts: {\n          authority,\n          govTokenAccount,\n          govTokenVault,\n          tokenRecord,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n      })\n    );\n\n    return new TransactionEnvelope(\n      this.sdk.provider,\n      instructions.concat(\n        this._genCastVotesInstructions({\n          proposal,\n          authority,\n          voteSide,\n          reason,\n          vote: voteKey,\n          tokenRecord,\n        })\n      )\n    );\n  }\n\n  async initializeTokenRecordIx(\n    authority: PublicKey = this.sdk.provider.wallet.publicKey\n  ): Promise<TransactionInstruction> {\n    invariant(this.electorate, \"electorate not set\");\n    invariant(this.electorateData, \"electorate data not loaded\");\n\n    const [tokenRecord, bump] = await findTokenRecordAddress(\n      authority,\n      this.electorate\n    );\n\n    return this.program.instruction.initializeTokenRecord(bump, {\n      accounts: {\n        authority,\n        tokenRecord,\n        electorate: this.electorate,\n        govTokenVault: await getATAAddress({\n          mint: this.electorateData.govTokenMint,\n          owner: tokenRecord,\n        }),\n        payer: this.sdk.provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n    });\n  }\n\n  private _genCastVotesInstructions(\n    args: VoteArgs & { tokenRecord: PublicKey; vote: PublicKey }\n  ): TransactionInstruction[] {\n    const { proposal, voteSide, reason, tokenRecord, vote } = args;\n    const authority = args.authority ?? this.provider.wallet.publicKey;\n\n    const ixs: TransactionInstruction[] = [];\n    ixs.push(\n      this.program.instruction.castVotes(voteSide, {\n        accounts: {\n          electorate: this.electorate,\n          authority,\n          proposal,\n          tokenRecord,\n          vote,\n          tribeca: this._genTribecaContext(),\n        },\n      })\n    );\n    if (reason) {\n      ixs.push(createMemoInstruction(reason, [authority]));\n    }\n\n    return ixs;\n  }\n\n  private _genTribecaContext(): { governor: PublicKey; program: PublicKey } {\n    invariant(this.electorateData, \"electrate data not loaded\");\n    return {\n      governor: this.electorateData.governor,\n      program: TRIBECA_ADDRESSES.Govern,\n    };\n  }\n\n  private async _getOrCreateGovTokenATAsInternal(\n    authority: PublicKey,\n    tokenRecord: PublicKey\n  ): Promise<{\n    govTokenAccount: PublicKey;\n    govTokenVault: PublicKey;\n    instructions: TransactionInstruction[];\n  }> {\n    invariant(this.electorateData, \"electorate data not loaded\");\n\n    const { provider } = this.sdk;\n\n    const { address: govTokenAccount, instruction: ix1 } = await getOrCreateATA(\n      {\n        provider,\n        mint: this.electorateData.govTokenMint,\n        owner: authority,\n        payer: authority,\n      }\n    );\n    const { address: govTokenVault, instruction: ix2 } = await getOrCreateATA({\n      provider,\n      mint: this.electorateData.govTokenMint,\n      owner: tokenRecord,\n      payer: authority,\n    });\n\n    return {\n      govTokenAccount,\n      govTokenVault,\n      instructions: [ix1, ix2].filter(\n        (ix): ix is TransactionInstruction => !!ix\n      ),\n    };\n  }\n}\n"]}