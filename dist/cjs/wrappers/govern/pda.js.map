{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../../../src/wrappers/govern/pda.ts"],"names":[],"mappings":";;;;AAAA,kDAA8C;AAE9C,6CAA4C;AAE5C,+CAAoD;AAEpD;;GAEG;AACI,MAAM,mBAAmB,GAAG,CACjC,IAAe,EACe,EAAE;IAChC,OAAO,MAAM,mBAAS,CAAC,kBAAkB,CACvC,CAAC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,EAC7D,6BAAiB,CAAC,MAAM,CACzB,CAAC;AACJ,CAAC,CAAA,CAAC;AAPW,QAAA,mBAAmB,uBAO9B;AAEF;;GAEG;AACI,MAAM,mBAAmB,GAAG,CACjC,WAAsB,EACtB,KAAU,EACoB,EAAE;IAChC,OAAO,MAAM,mBAAS,CAAC,kBAAkB,CACvC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;QAC1C,WAAW,CAAC,QAAQ,EAAE;QACtB,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;KACnC,EACD,6BAAiB,CAAC,MAAM,CACzB,CAAC;AACJ,CAAC,CAAA,CAAC;AAZW,QAAA,mBAAmB,uBAY9B;AAEF;;;;;GAKG;AACI,MAAM,eAAe,GAAG,CAC7B,WAAsB,EACtB,QAAmB,EACW,EAAE;IAChC,OAAO,MAAM,mBAAS,CAAC,kBAAkB,CACvC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;QACtC,WAAW,CAAC,QAAQ,EAAE;QACtB,QAAQ,CAAC,QAAQ,EAAE;KACpB,EACD,6BAAiB,CAAC,MAAM,CACzB,CAAC;AACJ,CAAC,CAAA,CAAC;AAZW,QAAA,eAAe,mBAY1B;AAEF;;;;GAIG;AACI,MAAM,uBAAuB,GAAG,CACrC,WAAsB,EACQ,EAAE;IAChC,OAAO,MAAM,mBAAS,CAAC,kBAAkB,CACvC,CAAC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAE,WAAW,CAAC,QAAQ,EAAE,CAAC,EACxE,6BAAiB,CAAC,MAAM,CACzB,CAAC;AACJ,CAAC,CAAA,CAAC;AAPW,QAAA,uBAAuB,2BAOlC","sourcesContent":["import { utils } from \"@project-serum/anchor\";\nimport type { u64 } from \"@saberhq/token-utils\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { TRIBECA_ADDRESSES } from \"../../constants\";\n\n/**\n * Finds the PDA of a Governor.\n */\nexport const findGovernorAddress = async (\n  base: PublicKey\n): Promise<[PublicKey, number]> => {\n  return await PublicKey.findProgramAddress(\n    [utils.bytes.utf8.encode(\"TribecaGovernor\"), base.toBuffer()],\n    TRIBECA_ADDRESSES.Govern\n  );\n};\n\n/**\n * Finds the PDA of a Proposal.\n */\nexport const findProposalAddress = async (\n  governorKey: PublicKey,\n  index: u64\n): Promise<[PublicKey, number]> => {\n  return await PublicKey.findProgramAddress(\n    [\n      utils.bytes.utf8.encode(\"TribecaProposal\"),\n      governorKey.toBuffer(),\n      index.toArrayLike(Buffer, \"le\", 8),\n    ],\n    TRIBECA_ADDRESSES.Govern\n  );\n};\n\n/**\n * Finds the PDA of a Vote.\n * @param proposalKey\n * @param voterKey\n * @returns\n */\nexport const findVoteAddress = async (\n  proposalKey: PublicKey,\n  voterKey: PublicKey\n): Promise<[PublicKey, number]> => {\n  return await PublicKey.findProgramAddress(\n    [\n      utils.bytes.utf8.encode(\"TribecaVote\"),\n      proposalKey.toBuffer(),\n      voterKey.toBuffer(),\n    ],\n    TRIBECA_ADDRESSES.Govern\n  );\n};\n\n/**\n * Finds the address of a ProposalMeta.\n * @param proposalKey\n * @returns\n */\nexport const findProposalMetaAddress = async (\n  proposalKey: PublicKey\n): Promise<[PublicKey, number]> => {\n  return await PublicKey.findProgramAddress(\n    [utils.bytes.utf8.encode(\"TribecaProposalMeta\"), proposalKey.toBuffer()],\n    TRIBECA_ADDRESSES.Govern\n  );\n};\n"]}