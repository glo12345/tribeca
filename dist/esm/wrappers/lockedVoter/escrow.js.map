{"version":3,"file":"escrow.js","sourceRoot":"","sources":["../../../../src/wrappers/lockedVoter/escrow.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type { TokenAmount } from \"@saberhq/token-utils\";\nimport {\n  getATAAddress,\n  getOrCreateATA,\n  TOKEN_PROGRAM_ID,\n} from \"@saberhq/token-utils\";\nimport type { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { TRIBECA_ADDRESSES } from \"../../constants\";\nimport type { EscrowData, LockerData } from \"../../programs/lockedVoter\";\nimport type { TribecaSDK } from \"../../sdk\";\nimport { findVoteAddress } from \"../govern/pda\";\nimport type { VoteSide } from \"../govern/types\";\n\nexport class VoteEscrow {\n  private _lockerData: LockerData | null = null;\n  private _escrowData: EscrowData | null = null;\n\n  constructor(\n    readonly sdk: TribecaSDK,\n    readonly locker: PublicKey,\n    readonly governorKey: PublicKey,\n    readonly escrowKey: PublicKey,\n    readonly owner: PublicKey\n  ) {}\n\n  get provider() {\n    return this.sdk.provider;\n  }\n\n  get lockerProgram() {\n    return this.sdk.programs.LockedVoter;\n  }\n\n  /**\n   * Locker data.\n   */\n  async lockerData() {\n    if (!this._lockerData) {\n      this._lockerData = await this.lockerProgram.account.locker.fetch(\n        this.locker\n      );\n    }\n    return this._lockerData;\n  }\n\n  /**\n   * Escrow data.\n   */\n  async data() {\n    if (!this._escrowData) {\n      this._escrowData = await this.lockerProgram.account.escrow.fetch(\n        this.escrowKey\n      );\n    }\n    return this._escrowData;\n  }\n\n  /**\n   * Creates a function to calculate the voting power of this escrow.\n   * @returns\n   */\n  async makeCalculateVotingPower(): Promise<(timestampSeconds: number) => BN> {\n    const escrowData = await this.data();\n    const lockerData = await this.lockerData();\n    return (timestampSeconds: number) => {\n      if (escrowData.escrowStartedAt.eq(new BN(0))) {\n        return new BN(0);\n      }\n      if (\n        timestampSeconds < escrowData.escrowStartedAt.toNumber() ||\n        timestampSeconds >= escrowData.escrowEndsAt.toNumber()\n      ) {\n        return new BN(0);\n      }\n      const secondsUntilLockupExpiry = escrowData.escrowEndsAt\n        .sub(new BN(timestampSeconds))\n        .toNumber();\n      const relevantSecondsUntilLockupExpiry = Math.min(\n        secondsUntilLockupExpiry,\n        lockerData.params.maxStakeDuration.toNumber()\n      );\n      const powerIfMaxLockup = escrowData.amount.mul(\n        new BN(lockerData.params.maxStakeVoteMultiplier)\n      );\n      return powerIfMaxLockup\n        .mul(new BN(relevantSecondsUntilLockupExpiry))\n        .div(lockerData.params.maxStakeDuration);\n    };\n  }\n\n  /**\n   * Calculates the voting power of this escrow.\n   * @param time Optional time to calculate power for.\n   * @returns\n   */\n  async calculateVotingPower(time: Date = new Date()): Promise<BN> {\n    return (await this.makeCalculateVotingPower())(\n      Math.floor(time.getTime() / 1_000)\n    );\n  }\n\n  /**\n   * Activates a proposal.\n   * @returns\n   */\n  activateProposal(proposal: PublicKey): TransactionEnvelope {\n    return this.provider.newTX([\n      this.lockerProgram.instruction.activateProposal({\n        accounts: {\n          locker: this.locker,\n          governor: this.governorKey,\n          proposal,\n          escrow: this.escrowKey,\n          escrowOwner: this.owner,\n          governProgram: TRIBECA_ADDRESSES.Govern,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Casts a vote on a proposal.\n   * @returns\n   */\n  async castVote({\n    proposal,\n    side,\n  }: {\n    proposal: PublicKey;\n    side: VoteSide;\n  }): Promise<TransactionEnvelope> {\n    const [voteKey, voteBump] = await findVoteAddress(proposal, this.owner);\n    const vote = await this.provider.getAccountInfo(voteKey);\n    let createVoteIX: TransactionInstruction | null = null;\n    if (!vote) {\n      createVoteIX = this.sdk.programs.Govern.instruction.newVote(\n        voteBump,\n        this.owner,\n        {\n          accounts: {\n            proposal,\n            vote: voteKey,\n            payer: this.provider.wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n          },\n        }\n      );\n    }\n    return this.provider.newTX([\n      createVoteIX,\n      this.lockerProgram.instruction.castVote(side, {\n        accounts: {\n          locker: this.locker,\n          escrow: this.escrowKey,\n          voteDelegate: this.owner,\n          proposal,\n          vote: voteKey,\n          governor: this.governorKey,\n          governProgram: TRIBECA_ADDRESSES.Govern,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Locks tokens into the escrow.\n   * @param amount\n   * @param durationSeconds The duration of the lock, in seconds\n   * @param authority\n   * @returns\n   */\n  async lock(\n    amount: TokenAmount,\n    durationSeconds: number\n  ): Promise<TransactionEnvelope> {\n    const escrowData = await this.data();\n    const sourceTokens = await getATAAddress({\n      mint: amount.token.mintAccount,\n      owner: escrowData.owner,\n    });\n    return this.provider.newTX([\n      this.lockerProgram.instruction.lock(\n        amount.toU64(),\n        new BN(durationSeconds),\n        {\n          accounts: {\n            locker: this.locker,\n            escrow: this.escrowKey,\n            escrowTokens: escrowData.tokens,\n            escrowOwner: escrowData.owner,\n            sourceTokens,\n            tokenProgram: TOKEN_PROGRAM_ID,\n          },\n        }\n      ),\n    ]);\n  }\n\n  /**\n   * Exits the escrow.\n   * @returns\n   */\n  async exit(): Promise<TransactionEnvelope> {\n    const lockerData = await this.lockerData();\n    const escrowData = await this.data();\n    const destinationTokens = await getOrCreateATA({\n      provider: this.provider,\n      mint: lockerData.tokenMint,\n      owner: escrowData.owner,\n    });\n    return this.provider.newTX([\n      destinationTokens.instruction,\n      this.lockerProgram.instruction.exit({\n        accounts: {\n          locker: this.locker,\n          escrow: this.escrowKey,\n          escrowOwner: escrowData.owner,\n          escrowTokens: escrowData.tokens,\n          destinationTokens: destinationTokens.address,\n          payer: this.provider.wallet.publicKey,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n      }),\n    ]);\n  }\n}\n"]}