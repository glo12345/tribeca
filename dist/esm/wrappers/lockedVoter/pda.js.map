{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../../../src/wrappers/lockedVoter/pda.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAC9C,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAE3D,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAEpD,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,IAAe,EACe,EAAE;IAChC,OAAO,MAAM,SAAS,CAAC,kBAAkB,CACvC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,EACpD,iBAAiB,CAAC,WAAW,CAC9B,CAAC;AACJ,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,MAAiB,EACjB,SAAoB,EACU,EAAE;IAChC,OAAO,MAAM,SAAS,CAAC,kBAAkB,CACvC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QACjC,MAAM,CAAC,QAAQ,EAAE;QACjB,SAAS,CAAC,QAAQ,EAAE;KACrB,EACD,iBAAiB,CAAC,WAAW,CAC9B,CAAC;AACJ,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAClC,MAAiB,EACjB,SAAoB,EACpB,KAAuB,EACO,EAAE;IAChC,OAAO,MAAM,SAAS,CAAC,kBAAkB,CACvC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC;QAC/C,MAAM,CAAC,QAAQ,EAAE;QACjB,SAAS,CAAC,QAAQ,EAAE;QACpB,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,EAAE;KAC9D,EACD,iBAAiB,CAAC,WAAW,CAC9B,CAAC;AACJ,CAAC,CAAA,CAAC","sourcesContent":["import { utils } from \"@project-serum/anchor\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\n\nimport { TRIBECA_ADDRESSES } from \"../../constants\";\n\nexport const findLockerAddress = async (\n  base: PublicKey\n): Promise<[PublicKey, number]> => {\n  return await PublicKey.findProgramAddress(\n    [utils.bytes.utf8.encode(\"Locker\"), base.toBuffer()],\n    TRIBECA_ADDRESSES.LockedVoter\n  );\n};\n\nexport const findEscrowAddress = async (\n  locker: PublicKey,\n  authority: PublicKey\n): Promise<[PublicKey, number]> => {\n  return await PublicKey.findProgramAddress(\n    [\n      utils.bytes.utf8.encode(\"Escrow\"),\n      locker.toBuffer(),\n      authority.toBuffer(),\n    ],\n    TRIBECA_ADDRESSES.LockedVoter\n  );\n};\n\nexport const findWhitelistAddress = async (\n  locker: PublicKey,\n  programId: PublicKey,\n  owner: PublicKey | null\n): Promise<[PublicKey, number]> => {\n  return await PublicKey.findProgramAddress(\n    [\n      utils.bytes.utf8.encode(\"LockerWhitelistEntry\"),\n      locker.toBuffer(),\n      programId.toBuffer(),\n      owner ? owner.toBuffer() : SystemProgram.programId.toBuffer(),\n    ],\n    TRIBECA_ADDRESSES.LockedVoter\n  );\n};\n"]}